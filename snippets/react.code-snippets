{
  "Typed React component": {
    "description": "Typed React component",
    "prefix": "typedcomponent",
    "scope": "typescriptreact",
    "body": [
      "interface ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props {",
      "\t//",
      "}\n",
      "export function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}({ }: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props) {",
      "\treturn ${2:<div></div>}",
      "}\n"
    ]
  },
  "React component": {
    "description": "React component",
    "prefix": "component",
    "scope": "typescriptreact,javascriptreact",
    "body": [
      "export function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}() {",
      "\treturn ${2:<div></div>}",
      "}\n"
    ]
  },
  "React async component": {
    "description": "React async component",
    "prefix": "asynccomponent",
    "scope": "typescriptreact,javascriptreact",
    "body": [
      "export async function ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}() {",
      "\treturn ${2:<div></div>}",
      "}\n"
    ]
  },
  "React useState": {
    "description": "React useState",
    "prefix": "us",
    "scope": "typescriptreact,javascriptreact",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
  },
  "Custom Hook": {
    "description": "Custom Hook",
    "prefix": "customhook",
    "scope": "typescriptreact,typescript,javascript,javascriptreact",
    "body": [
      "const ${1:$TM_FILENAME_BASE} = () => {",
      "\t$0",
      "return true",
      "}",
      "\nexport default ${1:$TM_FILENAME_BASE}"
    ]
  },
  "React Context with custom hook (React <19)": {
    "description": "React Context with custom hook (React <19)",
    "prefix": "ctx",
    "scope": "typescriptreact,javascriptreact",
    "body": [
      "import { createContext, ReactNode, useContext } from 'react'\n",
      "type ContextProps = {",
      "\t//",
      "}",
      "",
      "type ProviderProps = {",
      "\tchildren: ReactNode",
      "}\n",
      "const $1Context = createContext<ContextProps>({} as ContextProps)\n",
      "export const $1Provider = ({ children }: ProviderProps) => {",
      "\treturn <$1Context.Provider value={{}}>{children}</$1Context.Provider>",
      "}\n",
      "export const use$1 = () => {",
      "\tconst context = useContext($1Context)\n",
      "\tif (!context)",
      "\t\tthrow new Error(",
      "\t\t\t'use$1 s√≥ pode ser usado dentro de um \"$1Provider\"',",
      "\t\t)\n",
      "\treturn context",
      "}\n"
    ]
  }
}
